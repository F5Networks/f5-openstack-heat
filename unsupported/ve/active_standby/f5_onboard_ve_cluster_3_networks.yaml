heat_template_version: 2014-10-16

description: >
    This template deploys a Linux image as a TMOS Active/Standby HA VE
    onboarding server. Within the user_data of the ve_onboard_instance, another
    heat stack is built and deployed. This second stack deploys the Active and
    Standby VE servers.

parameters:
  onboard_network:
    type: string
    label: F5 Onboard Server Orchestration Network
    description: Private network to attach the orchestration instance
    default: None
    constraints:
      - custom_constraint: neutron.network
  onboard_image_location:
    type: string
    label: Onboard Image Location
    description: URL of onboard linux image
  package_proxy:
    type: string
    label: Package Install Proxy for APT
  http_proxy_host:
    type: string
    label: HTTP Proxy Host to user to acquire resources
    default: None
  http_proxy_port:
    type: number
    label: HTTP Proxy Port to use to acquire resources
    default: 8080
    constraints:
      - range: { min: 1024, max: 65534 }
  http_proxy_script_url:
    type: string
    label: HTTP Proxy Script URL for F5 License Client
    default: https://raw.githubusercontent.com/f5openstackcommunity/f5veonboard/master/includes/f5_license_http_proxy.pl
  license_activation_host:
    type: string
    label: License Activation Host
    default: None
  license_activation_port:
    type: number
    label: License Activation Port
    default: 443
    constraints:
      - range: { min: 1, max: 65534 }
  f5_odk_package_url:
    type: string
    label: F5 OpenStack Deployment Kit URL
    description: The URL to download the ODK debian package
    default: https://raw.githubusercontent.com/f5openstackcommunity/f5veonboard/master/packages/odk.deb
  f5_onboard_package_url:
    type: string
    label: F5 Virtual Edition Onboard Tools URL
    description: The URL to download the ODK debian package
    default: https://raw.githubusercontent.com/f5openstackcommunity/f5veonboard/master/packages/f5_onboard.deb
  f5_common_templates_url:
    type: string
    label: F5 Common Template Directory URL
    description: The URL to download common Heat templates
    default: https://raw.githubusercontent.com/f5openstackcommunity/f5veonboard/master/templates/common
  f5_ve_os_stack_name:
    type: string
    label: VE Cluster Name
    description: Unique Name for This Cluster
    default: 'f5_ve_ha_1_0_1'
  f5_ve_os_auth_url:
    type: string
    label: VE OS Keystone Auth URL
    description: Keystone URL to perform VE service creation, e.g. http://<keystone_ip>:5000/v2.0
  f5_ve_os_tenant:
    type: string
    label: VE OS Create Tenant
    description: Tenant to perform VE service creation
    default: admin
  f5_ve_os_user:
    type: string
    label: VE OS Create User
    description: User to perform image import services
    default: admin
  f5_ve_os_password:
    type: string
    label: VE OS Create User Password
    description: Password used to perform image import services
    default: admin
    hidden: true
  f5_ve_os_image:
    type: string
    label: F5 VE Image
    description: The image to be used on the ve instance.
    constraints:
      - custom_constraint: glance.image 
  f5_ve_os_flavor:
    type: string
    label: F5 VE Flavor
    description: Type of instance (flavor) to be used for the ve instance.
    default: m1.medium
    constraints:
      - custom_constraint: nova.flavor 
  f5_ve_os_config_drive:
    type: boolean
    label: Use Config Drive
    description: Use config drive to provider meta and user data.
    default: false 
  f5_ve_os_external_network:
    type: string
    label: F5 VE External Network
    description: Neutron External Network for Floating IPs
    default: None
  f5_ve_os_mgmt_network:
    type: string
    label: F5 VE Management Network
    description: F5 VE Management Network.
    default: None
    constraints:
      - custom_constraint: neutron.network
  f5_ve_os_mgmt_network_floating_ip:
    type: boolean
    label: Create F5 VE Management Neutron Floating IP
    description: Create F5 VE Management Neutron Floating IP
    default: false
  f5_ve_os_ha_network:
    type: string
    label: F5 VE HA Network
    description: F5 VE HA Network.
    default: None
    constraints:
      - custom_constraint: neutron.network
  f5_ve_os_network_1:
    type: string
    label: F5 VE 1.2 Network
    description: F5 VE 1.2 Network.
    default: None
    constraints:
      - custom_constraint: neutron.network
  f5_ve_os_network_1_name:
    type: string
    label: F5 VE Network Name for the 1.2 Interface
    description: TMM 1.2 network name.
    default: None
  f5_ve_os_network_1_floating_ip:
    type: boolean
    label: Create F5 VE TMOS 1.2 Network Floating SelfIP
    description: Create F5 VE TMOS 1.2 Floating SelfIP
    default: false
  f5_ve_default_gateway:
    type: string
    label: VE Default Gateway IP
    default: None
    description: Upstream Gateway IP Address for VE instances
  f5_ve_os_ssh_key:
    type: string
    label: F5 VE Root SSH Key Name
    description: Name of key-pair to be installed for root access on the VE instances
    default: None
    constraints:
      - custom_constraint: nova.keypair
  f5_ve_admin_password:
    type: string
    label: F5 VE Admin User Password
    description: TMOS admin password
    default: admin
    hidden: true  
  f5_ve_root_password:
    type: string
    label: F5 VE Root User Password
    description: TMOS root password
    default: admin
    hidden: true
  f5_ve_license_1:
    type: string
    label: Primary VE License Base Key
    description: F5 TMOS License Basekey
    default: None
    hidden: true
  f5_ve_license_2:
    type: string
    label: Secondary VE License Base Key
    description: F5 TMOS License Basekey
    default: None
    hidden: true

parameter_groups:
- parameters:
  - onboard_network
  - onboard_image_location
  - package_proxy
  - http_proxy_host
  - http_proxy_port
  - http_proxy_script_url
  - license_activation_host
  - license_activation_port
- parameters:
  - f5_ve_os_stack_name
  - f5_ve_os_auth_url
  - f5_ve_os_tenant
  - f5_ve_os_user
  - f5_ve_os_password
  - f5_ve_os_image
  - f5_ve_os_flavor
  - f5_ve_os_config_drive
  - f5_ve_os_ssh_key
  - f5_odk_package_url
  - f5_onboard_package_url
  - f5_common_templates_url
  - f5_ve_default_gateway
  - f5_ve_admin_password
  - f5_ve_root_password
  - f5_ve_license_1
  - f5_ve_license_2  
- parameters:
  - f5_ve_os_external_network
  - f5_ve_os_mgmt_network
  - f5_ve_os_mgmt_network_floating_ip
  - f5_ve_os_ha_network
  - f5_ve_os_network_1
  - f5_ve_os_network_1_name
  - f5_ve_os_network_1_floating_ip

resources:

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 3600

  wait_handle:
    type: OS::Heat::WaitConditionHandle

  onboard_image:
    type: OS::Glance::Image
    properties:
      container_format: bare
      disk_format: qcow2
      is_public: False
      location: { get_param: onboard_image_location }
      min_disk: 40
      min_ram: 512
      name: F5OnboardImage
      protected: False
    
  ve_onboard_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: onboard_security_group
      rules: 
        - protocol: icmp
          direction: ingress
        - protocol: icmp
          direction: egress
        - protocol: tcp
          direction: ingress
        - protocol: tcp
          direction: egress
        - protocol: udp
          direction: ingress
        - protocol: udp
          direction: egress            
    
  ve_onboard_instance:
    type: OS::Nova::Server
    properties:
      image: { get_resource: onboard_image }
      security_groups:
        - { get_resource: ve_onboard_security_group }
      flavor: m1.medium
      networks:
        - network: { get_param: onboard_network }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __stack_id__: { get_param: "OS::stack_id" }
            __stack_name: { get_param: "OS::stack_name" }
            __package_proxy__: { get_param: package_proxy }
            __http_proxy_host__: { get_param: http_proxy_host }
            __http_proxy_port__: { get_param: http_proxy_port }
            __http_proxy_script_url__ : { get_param: http_proxy_script_url }
            __license_activation_host__ : { get_param: license_activation_host }
            __license_activation_port__ : { get_param: license_activation_port }
            __f5_ve_os_stack_name__: { get_param: f5_ve_os_stack_name }
            __f5_ve_os_auth_url__: { get_param: f5_ve_os_auth_url }
            __f5_ve_os_tenant__: { get_param: f5_ve_os_tenant }
            __f5_ve_os_user__: { get_param: f5_ve_os_user }
            __f5_ve_os_password__: { get_param: f5_ve_os_password }
            __f5_ve_os_image__: { get_param: f5_ve_os_image }
            __f5_ve_os_flavor__: { get_param: f5_ve_os_flavor }
            __f5_ve_os_config_drive__: { get_param: f5_ve_os_config_drive }
            __f5_ve_os_ssh_key__: { get_param: f5_ve_os_ssh_key }          
            __f5_odk_package_url__: { get_param: f5_odk_package_url }
            __f5_onboard_package_url__: { get_param: f5_onboard_package_url }
            __f5_common_templates_url__: { get_param: f5_common_templates_url }
            __f5_ve_default_gateway__: { get_param: f5_ve_default_gateway }
            __f5_ve_admin_password__: { get_param: f5_ve_admin_password }
            __f5_ve_root_password__: { get_param: f5_ve_root_password }
            __f5_ve_license_1__: { get_param: f5_ve_license_1 }
            __f5_ve_license_2__: { get_param: f5_ve_license_2 }
            __f5_ve_os_external_network__: { get_param: f5_ve_os_external_network }
            __f5_ve_os_mgmt_network__: { get_param: f5_ve_os_mgmt_network }
            __f5_ve_os_mgmt_network_floating_ip__: { get_param: f5_ve_os_mgmt_network_floating_ip }
            __f5_ve_os_ha_network__: { get_param: f5_ve_os_ha_network }
            __f5_ve_os_network_1__: { get_param: f5_ve_os_network_1 }
            __f5_ve_os_network_1_name__: { get_param: f5_ve_os_network_1_name }
            __f5_ve_os_network_1_floating_ip__: { get_param: f5_ve_os_network_1_floating_ip }
          template: |
            #!/bin/bash -ex

            # create a onboard user
            adduser onboard --disabled-login --gecos 'Onboard' --quiet --ingroup sudo
            echo onboard:onboard|chpasswd
            sed -i 's|[#]*PasswordAuthentication no|PasswordAuthentication yes|g' /etc/ssh/sshd_config
            sed -i 's|UsePAM no|UsePAM yes|g' /etc/ssh/sshd_config
            service ssh restart
            
            # use http proxy if defined
            if [[ "__http_proxy_host__" != "None" ]]
            then
                export http_proxy=http://__http_proxy_host__:__http_proxy_port__
                export https_proxy=https://__http_proxy_host__:__http_proxy_port__
            fi
            
            # download packages
            wget -q -c -nc -O /home/onboard/odk.deb __f5_odk_package_url__
            wget -q -c -nc -O /home/onboard/f5_onboard.deb __f5_onboard_package_url__

            if [[ "__package_proxy__" != "None" ]]
            then
                echo "Acquire::http::proxy \"__package_proxy__\";" > /etc/apt/apt.conf
                echo "Acquire::https::proxy \"__package_proxy__\";" >> /etc/apt/apt.conf
            fi

            # update package list and install dependancies
            apt-get update
            apt-get -y install unzip qemu-utils lvm2 python-keystoneclient python-heatclient python-glanceclient python-novaclient python-neutronclient python-cinderclient python-eventlet python-suds python-paramiko
            
            # install packages
            dpkg -i /home/onboard/odk.deb
            dpkg -i /home/onboard/f5_onboard.deb    
            
            # setup environment
            HOME=/home/onboard
            export HOME=/home/onboard
            export OS_AUTH_URL=__f5_ve_os_auth_url__
            export OS_USERNAME=__f5_ve_os_user__
            export OS_PASSWORD=__f5_ve_os_password__
            export OS_TENANT_NAME=__f5_ve_os_tenant__
            
            # generate ve cluster template
            cd $HOME
            template_file=$HOME/f5_ve_cluster.yaml
            echo -e "heat_template_version: 2014-10-16" >$template_file
            echo -e "resources:" >>$template_file
            
            # check the creation of common resources (can be reused between templates)
            
            # security groups
            has_mgmt_group=`neutron security-group-show bigip_mgmt_security_group|grep description|wc -l`
            if [[ $has_mgmt_group == 0 ]]; then
                echo -e "  bigip_mgmt_security_group:">>$template_file
                echo -e "    type: __f5_common_templates_url__/bigip_mgmt_security_group.yaml">>$template_file
            fi
            
            has_control_group=`neutron security-group-show bigip_control_security_group|grep description|wc -l`
            if [[ $has_control_group == 0 ]]; then
                echo -e "  bigip_control_security_group:">>$template_file
                echo -e "    type: __f5_common_templates_url__/bigip_control_security_group.yaml">>$template_file
            fi
            
            has_data_group=`neutron security-group-show bigip_data_security_group|grep description|wc -l`
            if [[ $has_data_group == 0 ]]; then
                echo -e "  bigip_data_security_group:">>$template_file
                echo -e "    type: __f5_common_templates_url__/bigip_data_security_group.yaml">>$template_file
            fi
             
            # generate ve template parameters
            p="    properties:\n"
            p="$p      ve_image: __f5_ve_os_image__ \n"
            p="$p      ve_flavor: __f5_ve_os_flavor__ \n"
            p="$p      use_config_drive: __f5_ve_os_config_drive__ \n"
            p="$p      ssh_key: __f5_ve_os_ssh_key__ \n"
            p="$p      admin_password: __f5_ve_admin_password__ \n"
            p="$p      root_password: __f5_ve_root_password__ \n"
            p="$p      http_proxy_host: __http_proxy_host__ \n"
            p="$p      http_proxy_port: __http_proxy_port__ \n"
            p="$p      http_proxy_script_url: __http_proxy_script_url__ \n"
            p="$p      license_activation_host: __license_activation_host__ \n"
            p="$p      license_activation_port: __license_activation_port__ \n"
            p="$p      mgmt_network: __f5_ve_os_mgmt_network__ \n"
            p="$p      ha_network: __f5_ve_os_ha_network__ \n"
            p="$p      default_gateway: __f5_ve_default_gateway__ \n"
            
            # if no network name was given, query neutron for the name
            network_1_name="__f5_ve_os_network_1_name__"
            if [[ $network_1_name == "None" ]]
            then
                network_1_name=`neutron net-list |grep __f5_ve_os_network_1__|awk -F '|' '{print $3}'| tr -d '[[:space:]]'`
            fi
            p="$p      network_1: __f5_ve_os_network_1__ \n"
            p="$p      network_1_name: $network_1_name"
            
            echo -e "  f5_ve_instance_1:">>$template_file
            echo -e "    type: __f5_common_templates_url__/f5_ve_cluster_member_3_nic.yaml">>$template_file
            echo -e "$p">>$template_file
            echo -e "      license: __f5_ve_license_1__">>$template_file
            echo -e "  f5_ve_instance_2:">>$template_file
            echo -e "    type: __f5_common_templates_url__/f5_ve_cluster_member_3_nic.yaml">>$template_file
            echo -e "$p">>$template_file
            echo -e "      license: __f5_ve_license_2__">>$template_file
            
            # management Floating IPs
            need_mgmt_floating_ip=`echo "__f5_ve_os_mgmt_network_floating_ip__" | tr '[a-z]' '[A-Z]'`
            if [[ $need_mgmt_floating_ip == 'TRUE' ]]
            then
                external_network="__f5_ve_os_external_network__"
                if [[ $external_network == "None" ]]
                then
                    nets=($(neutron net-external-list --field id |grep -v -e ^+ -e '^|[[:space:]]id'| tr -d '|'))
                    external_network=${nets[0]}
                fi
                echo -e "  f5_ve_instance_1_mgmt_floatingip:">>$template_file
                echo -e "    type: OS::Neutron::FloatingIP">>$template_file
                echo -e "    properties:">>$template_file
                echo -e "        floating_network: $external_network">>$template_file
                echo -e "        port_id: { get_attr: [f5_ve_instance_1, mgmt_port] }">>$template_file
                echo -e "  f5_ve_instance_2_mgmt_floatingip:">>$template_file
                echo -e "    type: OS::Neutron::FloatingIP">>$template_file
                echo -e "    properties:">>$template_file
                echo -e "        floating_network: $external_network">>$template_file
                echo -e "        port_id: { get_attr: [f5_ve_instance_2, mgmt_port] }">>$template_file
            fi
            
            # data network ports for floating SelfIPs
            need_network_1_floating_ip=`echo "__f5_ve_os_network_1_floating_ip__" | tr '[a-z]' '[A-Z]'`
            if [[ $need_network_1_floating_ip == 'TRUE' ]]
            then
                echo -e "  f5_ve_network_1_floating_selfip_port:">>$template_file
                echo -e "    type: OS::Neutron::Port">>$template_file 
                echo -e "    properties:">>$template_file
                echo -e "        network: __f5_ve_os_network_1__">>$template_file
                echo -e "        device_id: { get_attr: [f5_ve_instance_1, ve_instance_id] }">>$template_file
                echo -e "        device_owner: __f5_ve_os_stack_name__">>$template_file
            fi
            
            echo -e "outputs:">>$template_file
            
            # primary VE
            echo -e "  f5_ve_instance_name_1:">>$template_file
            echo -e "    description: VE 1 Nova instance name">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_1, ve_instance_name] }">>$template_file        
            echo -e "  f5_ve_instance_id_1:">>$template_file
            echo -e "    description: VE 1 Nova instance ID">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_1, ve_instance_id] }">>$template_file

            echo -e "  f5_ve_mgmt_ip_1:">>$template_file
            echo -e "    description: VE 1 management IP address">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_1, mgmt_ip] }">>$template_file
            echo -e "  f5_ve_mgmt_mac_1:">>$template_file
            echo -e "    description: VE 1 management MAC address">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_1, mgmt_mac] }">>$template_file
            echo -e "  f5_ve_mgmt_port_1:">>$template_file
            echo -e "    description: VE 1 management MAC port ID">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_1, mgmt_port] }">>$template_file
            
            if [[ $need_mgmt_floating_ip == 'TRUE' ]]
            then
                echo -e "  f5_ve_mgmt_floatingip_ip_1:">>$template_file
                echo -e "    description: VE 1 management floatingip IP address">>$template_file
                echo -e "    value: { get_attr: [f5_ve_instance_1_mgmt_floatingip, floating_ip_address] }">>$template_file
                echo -e "  f5_ve_mgmt_floatingip_port_1:">>$template_file
                echo -e "    description: VE 1 management floatingip ID ">>$template_file
                echo -e "    value: { get_resource: f5_ve_instance_1_mgmt_floatingip }">>$template_file
            fi
            
            echo -e "  f5_ve_ha_ip_1:">>$template_file
            echo -e "    description: VE 1 management HA IP address">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_1, ha_ip] }">>$template_file
            echo -e "  f5_ve_ha_mac_1:">>$template_file
            echo -e "    description: VE 1 management HA MAC address">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_1, ha_mac] }">>$template_file
            echo -e "  f5_ve_ha_port_1:">>$template_file
            echo -e "    description: VE 1 management HA port ID">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_1, ha_port] }">>$template_file

            echo -e "  f5_ve_network_1_ip_1:">>$template_file
            echo -e "    description: VE 1 TMM 1.2 non floating SelfIP address">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_1, network_1_ip] }">>$template_file
            echo -e "  f5_ve_network_1_mac_1:">>$template_file
            echo -e "    description: VE 1 TMM 1.2 MAC address">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_1, network_1_mac] }">>$template_file
            echo -e "  f5_ve_network_1_port_1:">>$template_file
            echo -e "    description: VE 1 TMM 1.2 port ID">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_1, network_1_port] }">>$template_file
          
            # secondary VE
            echo -e "  f5_ve_instance_name_2:">>$template_file
            echo -e "    description: VE 2 Nova instance name">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_2, ve_instance_name] }">>$template_file        
            echo -e "  f5_ve_instance_id_2:">>$template_file
            echo -e "    description: VE 2 Nova instance ID">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_2, ve_instance_id] }">>$template_file

            echo -e "  f5_ve_mgmt_ip_2:">>$template_file
            echo -e "    description: VE 2 management IP address">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_2, mgmt_ip] }">>$template_file
            echo -e "  f5_ve_mgmt_mac_2:">>$template_file
            echo -e "    description: VE 2 management MAC address">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_2, mgmt_mac] }">>$template_file
            echo -e "  f5_ve_mgmt_port_2:">>$template_file
            echo -e "    description: VE 2 management MAC port ID">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_2, mgmt_port] }">>$template_file
            
            if [[ $need_mgmt_floating_ip == 'TRUE' ]]
            then
                echo -e "  f5_ve_mgmt_floatingip_ip_2:">>$template_file
                echo -e "    description: VE 2 management floatingip IP address">>$template_file
                echo -e "    value: { get_attr: [f5_ve_instance_2_mgmt_floatingip, floating_ip_address] }">>$template_file
                echo -e "  f5_ve_mgmt_floatingip_port_2:">>$template_file
                echo -e "    description: VE 2 management floatingip ID ">>$template_file
                echo -e "    value: { get_resource: f5_ve_instance_2_mgmt_floatingip }">>$template_file
            fi
            
            echo -e "  f5_ve_ha_ip_2:">>$template_file
            echo -e "    description: VE 2 management HA IP address">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_2, ha_ip] }">>$template_file
            echo -e "  f5_ve_ha_mac_2:">>$template_file
            echo -e "    description: VE 2 management HA MAC address">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_2, ha_mac] }">>$template_file
            echo -e "  f5_ve_ha_port_2:">>$template_file
            echo -e "    description: VE 2 management HA port ID">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_2, ha_port] }">>$template_file

            echo -e "  f5_ve_network_1_ip_2:">>$template_file
            echo -e "    description: VE 2 TMM 1.2 non floating SelfIP address">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_2, network_1_ip] }">>$template_file
            echo -e "  f5_ve_network_1_mac_2:">>$template_file
            echo -e "    description: VE 2 TMM 1.2 MAC address">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_2, network_1_mac] }">>$template_file
            echo -e "  f5_ve_network_1_port_2:">>$template_file
            echo -e "    description: VE 2 TMM 1.2 port ID">>$template_file
            echo -e "    value: { get_attr: [f5_ve_instance_2, network_1_port] }">>$template_file

            if [[ $need_network_1_floating_ip == 'TRUE' ]]
            then
                echo -e "  f5_ve_network_1_floating_selfip_ip:">>$template_file
                echo -e "    description: TMM 1.2 Floating SelfIP address">>$template_file
                echo -e "    value: { get_attr: [f5_ve_network_1_floating_selfip_port, fixed_ips, 0, ip_address] }">>$template_file
                echo -e "  f5_ve_network_1_floating_selfip_mac:">>$template_file
                echo -e "    description: TMM 1.2 Floating SelfIP port MAC address">>$template_file
                echo -e "    value: { get_attr: [f5_ve_network_1_floating_selfip_port, mac_address] }">>$template_file
                echo -e "  f5_ve_network_1_floating_selfip_port:">>$template_file
                echo -e "    description: TMM 1.2 Floating SelfIP port ID">>$template_file
                echo -e "    value: { get_resource: f5_ve_network_1_floating_selfip_port }">>$template_file
            fi
            
            echo "Generated template is:"
            cat $template_file
            echo "End of template"
            
            echo "My stack id is:" __stack_id__
            echo "My stack name is:" __stack_name__

            
            # unset proxy if defined for local communications
            unset http_proxy
            unset https_proxy
            
            # build tenant stack
            heat stack-create -f $template_file -c 60 __f5_ve_os_stack_name__
            
            MAX_ATTEMPTS=50
            NOT_COMPLETE=0
            SLEEP_INTERVAL=5
            while true; do
                # query the status of the VE image stack
                STACK_STATUS_LINES=`heat stack-show __f5_ve_os_stack_name__|grep stack_status`
                OIFS="$IFS"
                IFS="|"
                fields=($STACK_STATUS_LINES)
                IFS="$OIFS"
                STACK_STATUS=`echo ${fields[2]}| tr -d '[[:space:]]'`
                STACK_STATUS_REASON=`echo ${fields[5]}| tr -d '[[:space:]]'`
                
                echo "Stack status is $STACK_STATUS"
                
                if [[ $STACK_STATUS == 'CREATE_COMPLETE' ]]; then
                    echo 'FW HA instances are complete. Clustering instances..'
                    break
                fi
                if [[ $STACK_STATUS == 'CREATE_FAILED' ]]; then
                    echo 'FW HA instances failed.'
                    exit
                fi
                sleep $SLEEP_INTERVAL
                NOT_COMPLETE=$(($NOT_COMPLETE + 1))
                if [[ $NOT_COMPLETE -ge $MAX_ATTEMPTS ]]; then
                    echo 'FW HA stack failed to reach COMPLETE before timing out'
                    exit             
                fi
            done
            
            # add allowed address pairs for floating selfIPs
            if [[ $need_network_1_floating_ip == 'TRUE' ]]
            then
               FLOATING_IP=`heat output-show __f5_ve_os_stack_name__ f5_ve_network_1_floating_selfip_ip`
               FLOATING_IP=`echo $FLOATING_IP | tr -d '"'`
               VE1_NETWORK_1_PORT=`heat output-show __f5_ve_os_stack_name__ f5_ve_network_1_port_1`
               VE1_NETWORK_1_PORT=`echo $VE1_NETWORK_1_PORT | tr -d '"'`
               neutron port-update $VE1_NETWORK_1_PORT --allowed_address_pairs list=true type=dict ip_address=$FLOATING_IP
               VE2_NETWORK_1_PORT=`heat output-show __f5_ve_os_stack_name__ f5_ve_network_1_port_2`
               VE2_NETWORK_1_PORT=`echo $VE2_NETWORK_1_PORT | tr -d '"'`
               neutron port-update $VE2_NETWORK_1_PORT --allowed_address_pairs list=true type=dict ip_address=$FLOATING_IP
            fi
            
            # query heat for the IP addresses to cluster the VEs
            VE1_MGMT_IP=`heat output-show __f5_ve_os_stack_name__ f5_ve_mgmt_ip_1`
            VE1_MGMT_IP=`echo $VE1_MGMT_IP | tr -d '"'`
            VE1_MGMT_FLOAT_IP=$VE1_MGMT_IP
            if [[ $need_mgmt_floating_ip == 'TRUE' ]]
            then
                VE1_MGMT_FLOAT_IP=`heat output-show __f5_ve_os_stack_name__ f5_ve_mgmt_floatingip_ip_1`
                VE1_MGMT_FLOAT_IP=`echo $VE1_MGMT_FLOAT_IP | tr -d '"'`
            fi
            VE1_HA_IP=`heat output-show __f5_ve_os_stack_name__ f5_ve_ha_ip_1`
            VE1_HA_IP=`echo $VE1_HA_IP | tr -d '"'`
            VE2_MGMT_IP=`heat output-show __f5_ve_os_stack_name__ f5_ve_mgmt_ip_2`
            VE2_MGMT_IP=`echo $VE2_MGMT_IP | tr -d '"'`
            VE2_MGMT_FLOAT_IP=$VE2_MGMT_IP
            if [[ $need_mgmt_floating_ip == 'TRUE' ]]
            then
                VE2_MGMT_FLOAT_IP=`heat output-show __f5_ve_os_stack_name__ f5_ve_mgmt_floatingip_ip_2`
                VE2_MGMT_FLOAT_IP=`echo $VE2_MGMT_FLOAT_IP | tr -d '"'`
            fi
            VE2_HA_IP=`heat output-show __f5_ve_os_stack_name__ f5_ve_ha_ip_2`
            VE2_HA_IP=`echo $VE2_HA_IP | tr -d '"'`
            
            # cluster VEs
            # cluster tenant stacked BIG-IPS
            source f5-onboard-utils
            python $F5_ONBOARD_BIGIP_PY_DIR/cluster_generic.py \
            --ha-type pair --num-bigips 2 \
            --bigip-floating-ip-addr-list $VE1_MGMT_FLOAT_IP $VE2_MGMT_FLOAT_IP \
            --bigip-mgmt-addr-list $VE1_MGMT_IP $VE2_MGMT_IP \
            --bigip-ha-addr-list $VE1_HA_IP $VE2_HA_IP \
            --bigip-mirror-addr-list $VE1_HA_IP $VE2_HA_IP \
            --bigip-cluster-name __f5_ve_os_stack_name__ \
            --bigip-icontrol-username admin \
            --bigip-icontrol-password __f5_ve_admin_password__
            
            # delete this orchestration stack
            heat stack-delete __stack_id__
