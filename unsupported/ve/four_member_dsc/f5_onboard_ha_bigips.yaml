heat_template_version: 2013-05-23

description: This template deploys 2 TMOS VEs with trusted and untrusted networks prepared to be clustered.

parameters:
  f5_ve_image:
    type: string
    label: F5 VE Image
    description: The image to be used on the compute instance.
    constraints:
      - custom_constraint: glance.image 
  f5_ve_flavor:
    type: string
    label: F5 VE Flavor
    description: Type of instance (flavor) to be used for the VE.
    default: m1.medium
    constraints:
      - custom_constraint: nova.flavor 
  mgmt_network:
    type: string
    label: VE Management Network
    description: Management Interface Network.
    default: private-mgmt
    constraints:
      - custom_constraint: neutron.network
  ha_network:
    type: string
    label: VE HA Network
    description: HA Interface Network.
    default: private-ha
    constraints:
      - custom_constraint: neutron.network
  trusted_network:
    type: string
    label: VE Trusted Network
    description: Trusted Interface Network.
    default: private-trusted
    constraints:
      - custom_constraint: neutron.network
  untrusted_network:
    type: string
    label: VE Untrusted Network
    description: Untrusted Interface Network.
    default: private-mgmt
    constraints:
      - custom_constraint: neutron.network
  default_gateway:
    type: string
    label: Gateway IP
    default: 172.17.1.1
    description: Upstream Gateway IP Address
  http_proxy_host:
    type: string
    label: HTTP Proxy Host
    default: None
  http_proxy_port:
    type: number
    label: HTTP Proxy Port
    default: 8080
    constraints:
      - range: { min: 1024, max: 65534 }
  http_proxy_script_url:
    type: string
    label: HTTP Proxy Script URL for F5 License Client
    default: https://raw.githubusercontent.com/f5openstackcommunity/f5veonboard/master/includes/f5_license_http_proxy.pl
  license_activation_host:
    type: string
    label: License Activation Host
    default: None
  license_activation_port:
    type: number
    label: License Activation Port
    default: 443
    constraints:
      - range: { min: 1, max: 65534 }
  config_drive:
    type: boolean
    label: Use Config Drive
    description: Use config drive to provider meta and user data.
    default: false   
  ssh_key:
    type: string
    label: F5 FW Root SSH Key Name
    description: Name of key-pair to be installed on the FW instances.
    default: my_key
    constraints:
      - custom_constraint: nova.keypair
  f5_admin_password:
    type: string
    label: F5 FW Admin User Password
    description: Password used to perform image import services
    default: admin
    hidden: true  
  f5_root_password:
    type: string
    label: F5 FW Root User Password
    description: Password used to perform image import services
    default: admin
    hidden: true
  f5_license_1:
    type: string
    label: Primary FW License Base Key
    description: F5 TMOS License Basekey
    default: None
    hidden: true
  f5_license_2:
    type: string
    label: Secondary FW License Base Key
    description: F5 TMOS License Basekey
    default: None
    hidden: true

parameter_groups:
- parameters:
  - f5_ve_image
  - f5_ve_flavor
  - config_drive
  - ssh_key
  - mgmt_network
  - ha_network
  - trusted_network
  - untrusted_network
  - default_gateway
- parameters:
  - http_proxy_host
  - http_proxy_port
  - http_proxy_script_url
  - license_activation_host
  - license_activation_port
- parameters:
  - f5_admin_password
  - f5_root_password
  - f5_license_1
  - f5_license_2

resources:

   bigip_fw_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: security group rules for firewall interfaces
      name: bigip_fw_security_group
      rules: 
        - protocol: icmp
          direction: ingress
        - protocol: icmp
          direction: egress
        - protocol: tcp
          direction: ingress
        - protocol: tcp
          direction: egress
        - protocol: udp
          direction: ingress
        - protocol: udp
          direction: egress

   bigip_mgmt_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: security group rules for bigip mgmt port
      name: bigip_mgmt_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 443
          port_range_max: 443

   bigip_control_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: security group rules for ha and mirroring self ip address
      name: bigip_control_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
          port_range_min: 1026
          port_range_max: 1043
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 4353
          port_range_max: 4353
       
   f5_fw1_mgmt_port:
    type: OS::Neutron::Port
    properties:
      network: {get_param: mgmt_network}
      security_groups: [{get_resource: bigip_mgmt_security_group}]
   f5_fw1_ha_port:
    type: OS::Neutron::Port
    properties:
      network: {get_param: ha_network}
      security_groups: [{get_resource: bigip_control_security_group}]
   f5_fw1_trusted_port:
    type: OS::Neutron::Port
    properties:
      network: {get_param: trusted_network}
      security_groups: [{get_resource: bigip_fw_security_group}]
   f5_fw1_untrusted_port:
    type: OS::Neutron::Port
    properties:
      network: {get_param: untrusted_network}
      security_groups: [{get_resource: bigip_fw_security_group}]

   f5_fw2_mgmt_port:
    type: OS::Neutron::Port
    properties:
      network: {get_param: mgmt_network}
      security_groups: [{get_resource: bigip_mgmt_security_group}]
   f5_fw2_ha_port:
    type: OS::Neutron::Port
    properties:
      network: {get_param: ha_network}
      security_groups: [{get_resource: bigip_control_security_group}]
   f5_fw2_trusted_port:
    type: OS::Neutron::Port
    properties:
      network: {get_param: trusted_network}
      security_groups: [{get_resource: bigip_fw_security_group}]
   f5_fw2_untrusted_port:
    type: OS::Neutron::Port
    properties:
      network: {get_param: untrusted_network}
      security_groups: [{get_resource: bigip_fw_security_group}]

   f5_fw_instance_1:
    type: OS::Nova::Server
    properties:
      image: { get_param: f5_ve_image }
      flavor: { get_param: f5_ve_flavor }
      key_name: { get_param: ssh_key }
      config_drive: { get_param: config_drive }
      networks:
        - port: {get_resource: f5_fw1_mgmt_port}
        - port: {get_resource: f5_fw1_ha_port}
        - port: {get_resource: f5_fw1_trusted_port}
        - port: {get_resource: f5_fw1_untrusted_port}
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __http_proxy_host__: { get_param: http_proxy_host }
            __http_proxy_port__: { get_param: http_proxy_port }
            __http_proxy_script_url__ : { get_param: http_proxy_script_url }
            __license_activation_host__: { get_param: license_activation_host }
            __license_activation_port__: { get_param: license_activation_port }
            __f5_admin_password__: { get_param: f5_admin_password }
            __f5_root_password__: { get_param: f5_root_password }
            __f5_license_1__: { get_param: f5_license_1 }
            __default_gateway__: { get_param: default_gateway }
          template: |
            {
               "bigip": {
                   "ssh_key_inject": "true",
                   "change_passwords": "true",
                   "admin_password": "__f5_admin_password__",
                   "root_password": "__f5_root_password__",
                   "license": {
                       "basekey": "__f5_license_1__",
                       "host": "__license_activation_host__",
                       "port": "__license_activation_port__",
                       "proxyhost": "__http_proxy_host__",
                       "proxyport": "__http_proxy_port__",
                       "proxyscripturl": "__http_proxy_script_url__"
                   },
                   "system_cmds" : [
                       "tmsh modify sys global-settings gui-setup disabled",
                       "tmsh modify sys db tm.fw.defaultaction value drop",
                       "tmsh create ltm virtual forward-all destination 0.0.0.0:0 mask any ip-forward profiles add { fastL4 } mirror enabled",
                       "tmsh create security firewall policy fwpolicy",
                       "tmsh modify security firewall global-rules enforced-policy fwpolicy",
                       "tmsh modify security firewall policy fwpolicy rules add { allow-all { action accept-decisively place-before first } }",
                       "tmsh create ltm monitor gateway-icmp gw-monitor defaults-from /Common/gateway_icmp interval 1 timeout 2",
                       "tmsh create ltm pool gw-pool members add { __default_gateway__:0 } monitor gw-monitor",
                       "tmsh create sys ha-group failovergroup active-bonus 5 pools add { gw-pool { weight 50 } } enabled",
                       "tmsh modify cm traffic-group traffic-group-1 ha-group failovergroup"
                   ],
                   "modules": {
                       "auto_provision": "false",
                       "ltm": "nominal",
                       "gtm": "minimum",
                       "avr": "none",
                       "apm": "none",
                       "afm": "nominal",
                       "asm": "none"
                   },
                   "network": {
                       "dhcp": "true",
                       "selfip_prefix": "selfip-fw-",
                       "vlan_prefix": "network-fw-",
                       "interfaces": {
                           "1.1": {
                               "dhcp": "true",
                               "selfip_allow_service": "default",
                               "selfip_name": "selfip.HA",
                               "selfip_description": "Self IP address for BIG-IP HA subnet",
                               "vlan_name": "vlan.HA",
                               "vlan_description": "VLAN for BIG-IP External traffic",
                               "is_failover": "true",
                               "is_sync": "true",
                               "is_mirror_primary": "true",
                               "is_mirror_secondary": "false"
                           },
                           "1.2": {
                               "dhcp": "true",
                               "selfip_allow_service": "default",
                               "selfip_name": "selfip.Trusted",
                               "selfip_description": "Self IP address for BIG-IP Trusted subnet",
                               "vlan_name": "vlan.Trusted",
                               "vlan_description": "VLAN for BIG-IP Trusted traffic",
                               "is_failover": "false",
                               "is_sync": "false",
                               "is_mirror_primary": "false",
                               "is_mirror_secondary": "false"
                           },
                           "1.3": {
                               "dhcp": "true",
                               "selfip_allow_service": "default",
                               "selfip_name": "selfip.Untrusted",
                               "selfip_description": "Self IP address for BIG-IP Untrusted subnet",
                               "vlan_name": "vlan.Untrusted",
                               "vlan_description": "VLAN for BIG-IP Untrusted traffic",
                               "is_failover": "false",
                               "is_sync": "false",
                               "is_mirror_primary": "false",
                               "is_mirror_secondary": "false"
                           }
                       }
                   }
               }
            }

   f5_fw_instance_2:
    type: OS::Nova::Server
    properties:
      image: { get_param: f5_ve_image }
      flavor: { get_param: f5_ve_flavor }
      key_name: { get_param: ssh_key }
      config_drive: { get_param: config_drive }
      networks:
        - port: {get_resource: f5_fw2_mgmt_port}
        - port: {get_resource: f5_fw2_ha_port}
        - port: {get_resource: f5_fw2_trusted_port}
        - port: {get_resource: f5_fw2_untrusted_port}
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __http_proxy_host__: { get_param: http_proxy_host }
            __http_proxy_port__: { get_param: http_proxy_port }
            __http_proxy_script_url__ : { get_param: http_proxy_script_url }
            __license_activation_host__: { get_param: license_activation_host }
            __license_activation_port__: { get_param: license_activation_port }
            __f5_admin_password__: { get_param: f5_admin_password }
            __f5_root_password__: { get_param: f5_root_password }
            __f5_license_2__: { get_param: f5_license_2 }
            __default_gateway__: { get_param: default_gateway }
          template: |
            {
               "bigip": {
                   "ssh_key_inject": "true",
                   "change_passwords": "true",
                   "admin_password": "__f5_admin_password__",
                   "root_password": "__f5_root_password__",
                   "license": {
                       "basekey": "__f5_license_2__",
                       "host": "__license_activation_host__",
                       "port": "__license_activation_port__",
                       "proxyhost": "__http_proxy_host__",
                       "proxyport": "__http_proxy_port__",
                       "proxyscripturl": "__http_proxy_script_url__"
                   },
                   "system_cmds" : [
                       "tmsh modify sys global-settings gui-setup disabled",
                       "tmsh modify sys db tm.fw.defaultaction value drop",
                       "tmsh create ltm virtual forward-all destination 0.0.0.0:0 mask any ip-forward profiles add { fastL4 } mirror enabled",
                       "tmsh create security firewall policy fwpolicy",
                       "tmsh modify security firewall global-rules enforced-policy fwpolicy",
                       "tmsh modify security firewall policy fwpolicy rules add { allow-all { action accept-decisively place-before first } }",
                       "tmsh create ltm monitor gateway-icmp gw-monitor defaults-from /Common/gateway_icmp interval 1 timeout 2",
                       "tmsh create ltm pool gw-pool members add { __default_gateway__:0 } monitor gw-monitor",
                       "tmsh create sys ha-group failovergroup active-bonus 5 pools add { gw-pool { weight 50 } } enabled",
                       "tmsh modify cm traffic-group traffic-group-1 ha-group failovergroup"
                   ],
                   "modules": {
                       "auto_provision": "false",
                       "ltm": "nominal",
                       "gtm": "minimum",
                       "avr": "none",
                       "apm": "none",
                       "afm": "nominal",
                       "asm": "none"
                   },
                   "network": {
                       "dhcp": "true",
                       "selfip_prefix": "selfip-fw-",
                       "vlan_prefix": "network-fw-",
                       "interfaces": {
                           "1.1": {
                               "dhcp": "true",
                               "selfip_allow_service": "default",
                               "selfip_name": "selfip.HA",
                               "selfip_description": "Self IP address for BIG-IP HA subnet",
                               "vlan_name": "vlan.HA",
                               "vlan_description": "VLAN for BIG-IP External traffic",
                               "is_failover": "true",
                               "is_sync": "true",
                               "is_mirror_primary": "true",
                               "is_mirror_secondary": "false"
                           },
                           "1.2": {
                               "dhcp": "true",
                               "selfip_allow_service": "default",
                               "selfip_name": "selfip.Trusted",
                               "selfip_description": "Self IP address for BIG-IP Trusted subnet",
                               "vlan_name": "vlan.Trusted",
                               "vlan_description": "VLAN for BIG-IP Trusted traffic",
                               "is_failover": "false",
                               "is_sync": "false",
                               "is_mirror_primary": "false",
                               "is_mirror_secondary": "false"
                           },
                           "1.3": {
                               "dhcp": "true",
                               "selfip_allow_service": "default",
                               "selfip_name": "selfip.Untrusted",
                               "selfip_description": "Self IP address for BIG-IP Untrusted subnet",
                               "vlan_name": "vlan.Untrusted",
                               "vlan_description": "VLAN for BIG-IP Untrusted traffic",
                               "is_failover": "false",
                               "is_sync": "false",
                               "is_mirror_primary": "false",
                               "is_mirror_secondary": "false"
                           }
                       }
                   }
               }
            }
  
outputs:
  fw1_instance_name:
    description: Name of the instance
    value: { get_attr: [f5_fw_instance_1, name] }
  fw1_instance_id:
    description: ID of the instance
    value: { get_resource: f5_fw_instance_1 }
  fw1_mgmt_ip:
    description: The mgmt IP address of f5 fw instance 1
    value: { get_attr: [f5_fw1_mgmt_port, fixed_ips, 0, ip_address] }
  fw1_ha_ip:
    description: The HA IP address of f5 fw instance 1
    value: { get_attr: [f5_fw1_ha_port, fixed_ips, 0, ip_address] }
  fw2_instance_name:
    description: Name of the instance
    value: { get_attr: [f5_fw_instance_2, name] }
  fw2_instance_id:
    description: ID of the instance
    value: { get_resource: f5_fw_instance_2 }
  fw2_mgmt_ip:
    description: The mgmt IP address of f5 fw instance 2
    value: { get_attr: [f5_fw2_mgmt_port, fixed_ips, 0, ip_address] }
  fw2_ha_ip:
    description: The HA IP address of f5 fw instance 2
    value: { get_attr: [f5_fw2_ha_port, fixed_ips, 0, ip_address] }
